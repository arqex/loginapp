{
  "Create controller": {
    "scope": "typescript",
    "prefix": "controller",
    "body": [
      "import { Response } from 'express';",
      "import { AuthRequest } from 'src/auth/auth.types';"
      "",
      "export async function ${1:controllerName}Controller(req: AuthRequest, res: Response) {", 
      "  res.json({ message: '${1:controllerName}' });",
      "}",
    ]
  },

  "Create get test": {
    "scope": "typescript",
    "prefix": "gettest",
    "body": [
      "import { get${1:Model}ById as db1 } from '../${2:model}.db';",
      "import { prepareTestAuthToken, mockAuthGet } from '../../../testing/testing.utils';",
      "import { UserRole } from '@prisma/client';",
      "",
      "jest.mock('../${2:model}.db.ts');",
      "",
      "describe('get${1:Model}.controller', () => {",
      "  const get${1:Model}ById = db1 as jest.Mock;",
      "",
      "  beforeAll(async () => {",
      "    await prepareTestAuthToken();",
      "  });",
      "",
      "  it('should return 404', async () => {",
      "    get${1:Model}ById.mockResolvedValue(null);",
      "",
      "    const res = await mockAuthGet('/${2:model}s/dummy_${2:model}_id');",
      "    expect(res.status).toBe(404);",
      "    expect(get${1:Model}ById).toHaveBeenCalledWith('dummy_${2:model}_id');",
      "    expect(res.body).toMatchObject({",
      "      error: '${2:model}_not_found',",
      "    });",
      "  });",
      "});",
    ]
  },

  "Create get list test": {
    "scope": "typescript",
    "prefix": "getlisttest",
    "body": [
      "import { get${1:Model}sByQuery as db1 } from '../${2:model}.db';",
      "import {",
      "  prepareTestAuthToken,",
      "  mockAuthGet,",
      "} from '../../../testing/testing.utils';",
      "",
      "jest.mock('../${2:model}.db.ts');",
      "",
      "describe('get${1:Model}List.controller', () => {",
      "  const get${1:Model}ByQuery = db1 as jest.Mock;",
      "",
      "  beforeAll(async () => {",
      "    await prepareTestAuthToken();",
      "  });",
      "",
      "  it('should return paginated items', async () => {",
      "    get${1:Model}ByQuery.mockResolvedValue([",
      "      [{ id: 'dummy_${2:model}_id_1' }, { id: 'dummy_${2:model}_id_2' }],",
      "    ]);",
      "",
      "    const res = await mockAuthGet(",
      "      '/${2:model}s?orderBy=dummy_field&cursor=dummy_cursor&orderDirection=desc',",
      "    );",
      "    expect(get${1:Model}ByQuery).toHaveBeenCalledWith({",
      "      orderBy: { dummy_field: 'desc' },",
      "      cursor: { dummy_field: 'dummy_cursor' },",
      "      skip: 1,",
      "      take: 100,",
      "    });",
      "",
      "    expect(res.body).toMatchObject({",
      "      items: [{ id: 'dummy_${2:model}_id_1' }, { id: 'dummy_${2:model}_id_2' }],",
      "      pageSize: 100,",
      "      cursor: 'dummy_cursor',",
      "    });",
      "  });",
      "});"
    ]
  }
});